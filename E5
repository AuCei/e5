import pygame
import sys

pygame.init()

# Constants
WINDOW_WIDTH = 1200
WINDOW_HEIGHT = 600
FPS = 20
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
ADD_NEW_FLAME_RATE = 25

# Load images
cactus_img = pygame.image.load('cactus_bricks.png')
fire_img = pygame.image.load('fire_bricks.png')
dragon_img = pygame.image.load('dragon.png')
flames_img = pygame.transform.scale(pygame.image.load('fireball.png'), (20, 20))
mario_img = pygame.image.load('maryo.png')
game_over_img = pygame.image.load('end.png')
start_img = pygame.image.load('start.png')

# Fonts
font = pygame.font.SysFont('forte', 20)

# Initialize Pygame window
canvas = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption('Mario')

# Clock
CLOCK = pygame.time.Clock()


class Topscore:
    def __init__(self):
        self.high_score = 0

    def top_score(self, score):
        if score > self.high_score:
            self.high_score = score
        return self.high_score


class Dragon:
    dragon_velocity = 10

    def __init__(self):
        self.image = dragon_img
        self.rect = self.image.get_rect()
        self.rect.width -= 10
        self.rect.height -= 10
        self.rect.top = WINDOW_HEIGHT / 2
        self.rect.right = WINDOW_WIDTH
        self.up = True
        self.down = False

    def update(self):
        canvas.blit(self.image, self.rect)
        if self.rect.top <= cactus_img_rect.bottom:
            self.up = False
            self.down = True
        elif self.rect.bottom >= fire_img_rect.top:
            self.up = True
            self.down = False

        if self.up:
            self.rect.top -= self.dragon_velocity
        elif self.down:
            self.rect.top += self.dragon_velocity


class Flames:
    flames_velocity = 20

    def __init__(self):
        self.image = flames_img
        self.rect = self.image.get_rect()
        self.rect.right = dragon.rect.left
        self.rect.top = dragon.rect.top + 30

    def update(self):
        canvas.blit(self.image, self.rect)
        if self.rect.left > 0:
            self.rect.left -= self.flames_velocity


class Mario:
    velocity = 10

    def __init__(self):
        self.image = mario_img
        self.rect = self.image.get_rect()
        self.rect.left = 20
        self.rect.top = WINDOW_HEIGHT / 2 - 100
        self.down = True
        self.up = False

    def update(self):
        canvas.blit(self.image, self.rect)
        if self.rect.top <= cactus_img_rect.bottom or self.rect.bottom >= fire_img_rect.top:
            game_over()
        if self.up:
            self.rect.top -= self.velocity
        if self.down:
            self.rect.bottom += self.velocity


def game_over():
    pygame.mixer.music.stop()
    music = pygame.mixer.Sound('mario_dies.wav')
    music.play()
    topscore.top_score(SCORE)
    game_over_rect = game_over_img.get_rect(center=(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2))
    canvas.blit(game_over_img, game_over_rect)
    pygame.display.update()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                pygame.quit()
                sys.exit()
        CLOCK.tick(FPS)


def start_game():
    canvas.fill(BLACK)
    start_rect = start_img.get_rect(center=(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2))
    canvas.blit(start_img, start_rect)
    pygame.display.update()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                game_loop()


def check_level(score):
    if score < 10:
        cactus_img_rect.bottom = 50
        fire_img_rect.top = WINDOW_HEIGHT - 50
    elif score < 20:
        cactus_img_rect.bottom = 100
        fire_img_rect.top = WINDOW_HEIGHT - 100
    elif score < 30:
        cactus_img_rect.bottom = 150
        fire_img_rect.top = WINDOW_HEIGHT - 150
    else:
        cactus_img_rect.bottom = 200
        fire_img_rect.top = WINDOW_HEIGHT - 200


def game_loop():
    global dragon, SCORE, LEVEL, cactus_img_rect, fire_img_rect
    dragon = Dragon()
    flames_list = []
    SCORE = 0
    LEVEL = 1
    cactus_img_rect = cactus_img.get_rect()
    fire_img_rect = fire_img.get_rect()
    pygame.mixer.music.load('mario_theme.wav')
    pygame.mixer.music.play(-1, 0.0)

    while True:
        canvas.fill(BLACK)
        check_level(SCORE)
        dragon.update()

        add_new_flame_counter = 0
        add_new_flame_counter += 1

        if add_new_flame_counter == ADD_NEW_FLAME_RATE:
            add_new_flame_counter = 0
            new_flame = Flames()
            flames_list.append(new_flame)

        for f in flames_list:
            if f.rect.left <= 0:
                flames_list.remove(f)
                SCORE += 1
            f.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    mario.up = True
                    mario.down = False
                elif event.key == pygame.K_DOWN:
                    mario.down = True
                    mario.up = False
            if event.type == pygame.KEYUP:
                if event.key == pygame.K_UP:
                    mario.up = False
                    mario.down = True
                elif event.key == pygame.K_DOWN:
                    mario.down = True
                    mario.up = False

        score_font = font.render('Score:' + str(SCORE), True, GREEN)
        score_font_rect = score_font.get_rect(center=(200, cactus_img_rect.bottom + score_font_rect.height / 2))
        canvas.blit(score_font, score_font_rect)

        level_font = font.render('Level:' + str(LEVEL), True, GREEN)
        level_font_rect = level_font.get_rect(center=(500, cactus_img_rect.bottom + score_font_rect.height / 2))
        canvas.blit(level_font, level_font_rect)

        top_score_font = font.render('Top Score:' + str(topscore.high_score), True, GREEN)
        top_score_font_rect = top_score_font.get_rect(center=(800, cactus_img_rect.bottom + score_font_rect.height / 2))
        canvas.blit(top_score_font, top_score_font_rect)

        canvas.blit(cactus_img, cactus_img_rect)
        canvas.blit(fire_img, fire_img_rect)
        mario.update()

        for f in flames_list:
            if f.rect.colliderect(mario.rect):
                game_over()

        pygame.display.update()
        CLOCK.tick(FPS)


start_game()
